(function(){var e={727:function(){},850:function(){},435:function(){},757:function(){},711:function(){},788:function(e,t,n){var s=n(727);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),n(346).Z("71a7571e",s,!0,{})},867:function(e,t,n){var s=n(850);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),n(346).Z("28e1c863",s,!0,{})},931:function(e,t,n){var s=n(435);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),n(346).Z("0f59ab66",s,!0,{})},145:function(e,t,n){var s=n(757);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),n(346).Z("c4f7b02c",s,!0,{})},276:function(e,t,n){var s=n(711);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals),n(346).Z("0db1e8cf",s,!0,{})},346:function(e,t,n){"use strict";function s(e,t){for(var n=[],s={},o=0;o<t.length;o++){var i=t[o],a=i[0],l={id:e+":"+o,css:i[1],media:i[2],sourceMap:i[3]};s[a]?s[a].parts.push(l):n.push(s[a]={id:a,parts:[l]})}return n}n.d(t,{Z:function(){return g}});var o="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!o)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var i={},a=o&&(document.head||document.getElementsByTagName("head")[0]),l=null,r=0,d=!1,c=function(){},b=null,u="data-vue-ssr-id",m="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function g(e,t,n,o){d=n,b=o||{};var a=s(e,t);return p(a),function(t){for(var n=[],o=0;o<a.length;o++){var l=i[a[o].id];l.refs--,n.push(l)}t?p(a=s(e,t)):a=[];for(var o=0;o<n.length;o++){var l=n[o];if(0===l.refs){for(var r=0;r<l.parts.length;r++)l.parts[r]();delete i[l.id]}}}}function p(e){for(var t=0;t<e.length;t++){var n=e[t],s=i[n.id];if(s){s.refs++;for(var o=0;o<s.parts.length;o++)s.parts[o](n.parts[o]);for(;o<n.parts.length;o++)s.parts.push(_(n.parts[o]));s.parts.length>n.parts.length&&(s.parts.length=n.parts.length)}else{for(var a=[],o=0;o<n.parts.length;o++)a.push(_(n.parts[o]));i[n.id]={id:n.id,refs:1,parts:a}}}}function h(){var e=document.createElement("style");return e.type="text/css",a.appendChild(e),e}function _(e){var t,n,s=document.querySelector("style["+u+'~="'+e.id+'"]');if(s){if(d)return c;s.parentNode.removeChild(s)}if(m){var o=r++;t=f.bind(null,s=l||(l=h()),o,!1),n=f.bind(null,s,o,!0)}else t=v.bind(null,s=h()),n=function(){s.parentNode.removeChild(s)};return t(e),function(s){s?(s.css!==e.css||s.media!==e.media||s.sourceMap!==e.sourceMap)&&t(e=s):n()}}var w=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function f(e,t,n,s){var o=n?"":s.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function v(e,t){var n=t.css,s=t.media,o=t.sourceMap;if(s&&e.setAttribute("media",s),b.ssrId&&e.setAttribute(u,t.id),o&&(n+="\n/*# sourceURL="+o.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},t={};function n(s){var o=t[s];if(void 0!==o)return o.exports;var i=t[s]={id:s,exports:{}};return e[s](i,i.exports,n),i.exports}n.d=function(e,t){for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="bundles/odscheduler/",window?.__sw__?.assetPath&&(n.p=window.__sw__.assetPath+"/bundles/odscheduler/"),function(){"use strict";n(788);let{Component:e}=Shopware,{Criteria:t}=Shopware.Data;e.extend("od-entity-listing","sw-entity-listing",{template:'{% block sw_data_grid_bulk_selected_actions_content %}\n    {% block sw_data_grid_bulk_edit_content %}\n        \n        <a\n                v-if="allowBulkEdit"\n                class="link link-primary"\n                @click="onClickBulkEdit"\n        >\n            {{ $tc(\'global.sw-bulk-edit-modal.bulkEdit\') }}\n        </a>\n    {% endblock %}\n\n    {% block sw_data_grid_bulk_delete_content %}\n        \n        <a\n                v-if="allowDelete"\n                class="link link-danger"\n                @click="showBulkDeleteModal = true"\n        >\n            {{ $tc(\'global.default.delete\') }}\n        </a>\n    {% endblock %}\n{% endblock %}\n\n{% block sw_data_grid_slot_bulk_modals %}\n    {% block sw_data_grid_bulk_edit_modal %}\n        <slot\n                name="bulk-edit-modal"\n                v-bind="{ selection }"\n        >\n            {% block sw_data_grid_slot_bulk_edit_modal %}\n                <sw-bulk-edit-modal\n                        v-if="showBulkEditModal"\n                        :selection="selection"\n                        :bulk-grid-edit-columns="bulkGridEditColumns"\n                        @modal-close="onCloseBulkEditModal"\n                />\n            {% endblock %}\n        </slot>\n    {% endblock %}\n\n    {% block sw_data_grid_bulk_delete_modal %}\n        <sw-modal\n                v-if="showBulkDeleteModal"\n                variant="small"\n                :title="$tc(\'global.default.warning\')"\n                @modal-close="showBulkDeleteModal = false"\n        >\n            <p class="sw-data-grid__confirm-bulk-delete-text">\n                <slot\n                        name="bulk-modal-delete-confirm-text"\n                        v-bind="{ selectionCount }"\n                >\n                    {{ $tc(\'global.entity-components.deleteMessage\', selectionCount, { count: selectionCount }) }}\n                </slot>\n            </p>\n\n            <template #modal-footer>\n                <slot name="bulk-modal-cancel">\n                    <sw-button\n                            size="small"\n                            @click="showBulkDeleteModal = false"\n                    >\n                        {{ $tc(\'global.default.cancel\') }}\n                    </sw-button>\n                </slot>\n\n                <slot\n                        name="bulk-modal-delete-items"\n                        v-bind="{ isBulkLoading, deleteItems }"\n                >\n                    <sw-button\n                            variant="danger"\n                            size="small"\n                            :is-loading="isBulkLoading"\n                            @click="deleteItems"\n                    >\n                        {{ $tc(\'global.default.delete\') }}\n                    </sw-button>\n                </slot>\n            </template>\n        </sw-modal>\n    {% endblock %}\n{% endblock %}\n\n{% block sw_data_grid_slot_actions %}\n    <slot\n            name="detail-action"\n            v-bind="{ item }"\n    >\n        <sw-context-menu-item\n                v-if="detailRoute"\n                v-tooltip="{\n            message: $tc(\'sw-privileges.tooltip.warning\'),\n            disabled: allowEdit || allowView,\n            showOnDisabledElements: true,\n            zIndex: 9050,\n        }"\n                class="sw-entity-listing__context-menu-edit-action"\n                :disabled="!allowEdit && !allowView"\n                :router-link="{ name: detailRoute, params: { id: item.id } }"\n        >\n            {{ detailPageLinkText }}\n        </sw-context-menu-item>\n    </slot>\n\n    <slot\n            name="more-actions"\n            v-bind="{ item }"\n    ></slot>\n\n    <slot\n            name="delete-action"\n            v-bind="{ item, showDelete, allowDelete }"\n    >\n        <sw-context-menu-item\n                v-tooltip.bottom="{\n            message: $tc(\'sw-privileges.tooltip.warning\'),\n            disabled: allowDelete,\n            showOnDisabledElements: true,\n            zIndex: 9050,\n        }"\n                :disabled="!allowDelete"\n                class="sw-entity-listing__context-menu-edit-delete"\n                variant="danger"\n                @click="showDelete(item.id)"\n        >\n            {{ $tc(\'global.default.delete\') }}\n        </sw-context-menu-item>\n\n        <sw-context-menu-item\n                class="sw-entity-listing__context-menu-edit-test"\n                variant="info"\n        >\n            Test\n        </sw-context-menu-item>\n    </slot>\n{% endblock %}\n\n{% block sw_data_grid_slot_action_modals %}\n    <sw-modal\n            v-if="deleteId === item.id"\n            :title="$tc(\'global.default.warning\')"\n            variant="small"\n            @modal-close="closeModal"\n    >\n        <p class="sw-listing__confirm-delete-text">\n            <slot\n                    name="delete-confirm-text"\n                    v-bind="{ item }"\n            >\n                {{ $tc(\'global.entity-components.deleteMessage\') }}\n            </slot>\n        </p>\n\n        <template #modal-footer>\n            <slot\n                    name="delete-modal-footer"\n                    v-bind="{ item }"\n            >\n                <slot\n                        name="delete-modal-cancel"\n                        v-bind="{ item }"\n                >\n                    <sw-button\n                            size="small"\n                            @click="closeModal"\n                    >\n                        {{ $tc(\'global.default.cancel\') }}\n                    </sw-button>\n                </slot>\n\n                <slot\n                        name="delete-modal-delete-item"\n                        v-bind="{ item }"\n                >\n                    <sw-button\n                            variant="danger"\n                            size="small"\n                            @click="deleteItem(item.id)"\n                    >\n                        {{ $tc(\'global.default.delete\') }}\n                    </sw-button>\n                </slot>\n            </slot>\n        </template>\n    </sw-modal>\n\n\n{% endblock %}\n\n  {% block sw_data_grid_select_item_checkbox %}\n      <sw-checkbox-field\n              v-if="canDelete(item)"\n              :disabled="!isRecordSelectable(item)"\n              :value="isSelected(item[itemIdentifierProperty])"\n              @change="selectItem($event, item)"\n      />\n  {% endblock %}\n\n\n{% block sw_data_grid_table %}\n    <table ref="table"\n            class="sw-data-grid__table"\n    >\n\n        {% block sw_data_grid_header %}\n            <thead\n                    v-if="showHeader"\n                    class="sw-data-grid__header"\n            >\n\n            {% block sw_data_grid_header_row %}\n                <tr class="sw-data-grid__row">\n\n                    {% block sw_data_grid_header_cell_selection %}\n                        <th\n                                v-if="showSelection"\n                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--selection"\n                        >\n                            {% block sw_data_grid_header_cell_selection_content %}\n                                <div class="sw-data-grid__cell-content">\n                                    {% block sw_data_grid_select_all_checkbox %}\n                                        <sw-checkbox-field\n                                                v-if="records && records.length > 0"\n                                                :disabled="isSelectAllDisabled"\n                                                class="sw-data-grid__select-all"\n                                                :value="allSelectedChecked"\n                                                @change="selectAll"\n                                        />\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </th>\n                    {% endblock %}\n\n                    {% block sw_data_grid_header_columns %}\n                        <th\n                                v-for="(column, columnIndex) in currentColumns"\n                                v-show="column.visible"\n                                :key="`${column.property}-${columnIndex}`"\n                                ref="column"\n                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--property"\n                                :class="getHeaderCellClasses(column, columnIndex)"\n                                :style="{ width: column.width, minWidth: column.width }"\n                                @click="onClickHeaderCell($event, column)"\n                        >\n\n                            {% block sw_data_grid_header_columns_content %}\n                                <div class="sw-data-grid__cell-content">\n\n                                    <slot\n                                            :name="`column-label-${column.property}`"\n                                            v-bind="{ column, columnIndex }"\n                                    >\n\n                                        {% block sw_data_grid_header_columns_icon %}\n                                            <sw-icon\n                                                    v-if="column.iconLabel"\n                                                    :name="column.iconLabel"\n                                            >\n                                                {{ $te(column.label) ? $tc(column.label) : column.label }}\n                                            </sw-icon>\n                                        {% endblock %}\n\n                                        {% block sw_data_grid_header_columns_label %}\n                                            <template v-else>\n                                                {{ $te(column.label) ? $tc(column.label) : column.label }}\n                                            </template>\n                                        {% endblock %}\n                                    </slot>\n\n                                    {% block sw_data_grid_column_actions %}\n                                        <sw-context-button\n                                                v-if="allowColumnEdit && !isInlineEditActive"\n                                                class="sw-data-grid__action-edit-column"\n                                        >\n                                            {% block sw_data_grid_column_actions_hide %}\n                                                <sw-context-menu-item\n                                                        :disabled="column.primary"\n                                                        variant="danger"\n                                                        @click="hideColumn(columnIndex)"\n                                                >\n                                                    {{ $tc(\'global.sw-data-grid.labelColumnHide\') }}\n                                                </sw-context-menu-item>\n                                            {% endblock %}\n                                        </sw-context-button>\n                                    {% endblock %}\n\n                                    {% block sw_data_grid_sort_indicator %}\n                                        <span\n                                                v-if="column.sortable && currentSortBy === column.dataIndex"\n                                                class="sw-data-grid__sort-indicator"\n                                        >\n                                {% block sw_data_grid_sort_indicator_transition %}\n                                    <transition\n                                            name="sort-indicator"\n                                            mode="out-in"\n                                    >\n                                    {% block sw_data_grid_sort_indicator_icon_asc %}\n                                        <sw-icon\n                                                v-if="currentSortDirection === \'ASC\'"\n                                                key="ASC"\n                                                name="small-arrow-small-up"\n                                                size="16px"\n                                        />\n                                    {% endblock %}\n\n                                        {% block sw_data_grid_sort_indicator_icon_desc %}\n                                            <sw-icon\n                                                    v-else\n                                                    key="DESC"\n                                                    name="small-arrow-small-down"\n                                                    size="16px"\n                                            />\n                                        {% endblock %}\n                                </transition>\n                                {% endblock %}\n                            </span>\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n\n                            {% block sw_data_grid_header_columns_resize %}\n                                <span\n                                        v-if="column.allowResize"\n                                        class="sw-data-grid__cell-resize"\n                                        @mousedown="onStartResize($event, column, columnIndex)"\n                                ></span>\n                            {% endblock %}\n                        </th>\n                    {% endblock %}\n\n                    {% block sw_data_grid_header_cell_spacer %}\n                        <th\n                                v-if="hasResizeColumns"\n                                aria-hidden="true"\n                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell-spacer"\n                        >\n                            <div class="sw-data-grid__cell-content"></div>\n                        </th>\n                    {% endblock %}\n\n                    {% block sw_data_grid_header_cell_actions %}\n                        <th\n                                v-if="showActions"\n                                class="sw-data-grid__cell sw-data-grid__cell--header sw-data-grid__cell--actions sw-data-grid__cell-settings"\n                                :class="{ \'is--loading\': loading }"\n                        >\n                            {% block sw_data_grid_header_cell_actions_content %}\n                                <div class="sw-data-grid__cell-content">\n                                    {% block sw_data_grid_settings %}\n                                        <sw-data-grid-settings\n                                                v-if="showSettings"\n                                                :columns="currentColumns"\n                                                :compact="compact"\n                                                :previews="previews"\n                                                :enable-previews="hasPreviewSlots"\n                                                :disabled="isInlineEditActive"\n                                                @change-compact-mode="onChangeCompactMode"\n                                                @change-preview-images="onChangePreviews"\n                                                @change-column-visibility="onChangeColumnVisibility"\n                                                @change-column-order="onChangeColumnOrder"\n                                        >\n                                            {% block sw_data_grid_settings_additional_settings %}\n                                                <template #additionalSettings>\n                                                    {% block sw_data_grid_settings_additional_settings_inner %}\n                                                        <slot name="additionalSettings"></slot>\n                                                    {% endblock %}\n                                                </template>\n                                            {% endblock %}\n                                        </sw-data-grid-settings>\n\n                                        {% block sw_data_grid_settings_custom_settings %}\n                                            <slot name="customSettings">\n                                                {% block sw_data_grid_settings_custom_settings_slot %}{% endblock %}\n                                            </slot>\n                                        {% endblock %}\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </th>\n                    {% endblock %}\n                </tr>\n            {% endblock %}\n            </thead>\n        {% endblock %}\n\n        {% block sw_data_grid_body %}\n            <tbody\n                    v-if="!loading"\n                    class="sw-data-grid__body"\n            >\n\n            {% block sw_data_grid_body_row %}\n                <tr\n                        v-for="(item, itemIndex) in records"\n                        :key="item.id"\n                        class="sw-data-grid__row"\n                        :class="getRowClasses(item, itemIndex)"\n                >\n\n                    {% block sw_data_grid_body_cell_selection %}\n                        <td\n                                v-if="showSelection"\n                                class="sw-data-grid__cell sw-data-grid__cell--selection"\n                        >\n                            <slot\n                                    name="selection-content"\n                                    v-bind="{ item, isSelected, isRecordSelectable, selectItem, itemIdentifierProperty }"\n                            >\n                                {% block sw_data_grid_body_cell_selection_content %}\n                                    <div class="sw-data-grid__cell-content">\n                                        {% block sw_data_grid_select_item_checkbox %}\n                                            <sw-checkbox-field v-if="canDelete(item)"\n                                                    :disabled="!isRecordSelectable(item)"\n                                                    :value="isSelected(item[itemIdentifierProperty])"\n                                                    @change="selectItem($event, item)"\n                                            />\n                                        {% endblock %}\n                                    </div>\n                                {% endblock %}\n                            </slot>\n                        </td>\n                    {% endblock %}\n\n                    {% block sw_data_grid_body_columns %}\n                        <td\n                                v-for="(column, columnIndex) in currentColumns"\n                                v-show="column.visible"\n                                :key="`${item.id}-${columnIndex}`"\n                                class="sw-data-grid__cell"\n                                :class="getCellClasses(column)"\n                                @dblclick="onDbClickCell(item)"\n                        >\n\n                            {% block sw_data_grid_body_columns_content %}\n                                <div class="sw-data-grid__cell-content">\n\n                                    {% block sw_data_grid_preview_slot %}\n                                        <slot\n                                                v-if="previews && !isInlineEdit(item)"\n                                                :name="`preview-${column.property}`"\n                                                v-bind="{ item, column, compact }"\n                                        ></slot>\n                                    {% endblock %}\n\n                                    {% block sw_data_grid_columns_slot %}\n                                        <slot\n                                                :name="`column-${column.property}`"\n                                                v-bind="{ item, itemIndex, column, columnIndex, compact, isInlineEdit: (isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')) }"\n                                        >\n                                            <template v-if="column.inlineEdit === \'boolean\'">\n                                                {% block sw_data_grid_columns_boolean %}\n                                                    <sw-data-grid-column-boolean\n                                                            v-model:value="item[column.property]"\n                                                            :is-inline-edit="isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')"\n                                                    />\n                                                {% endblock %}\n                                            </template>\n                                            <template v-else>\n                                                {% block sw_data_grid_columns_inline_edit %}\n                                                    <template v-if="isInlineEdit(item) && column.hasOwnProperty(\'inlineEdit\')">\n                                                        {% block sw_data_grid_columns_render_inline_edit %}\n                                                            <sw-data-grid-inline-edit\n                                                                    :column="column"\n                                                                    :compact="compact"\n                                                                    :value="item[column.property]"\n                                                                    @input="item[column.property] = $event"\n                                                            />\n                                                        {% endblock %}\n                                                    </template>\n                                                {% endblock %}\n\n                                                {% block sw_data_grid_columns_value %}\n                                                    <template v-else>\n                                                        {% block sw_data_grid_columns_render_router_link %}\n                                                            <router-link\n                                                                    v-if="column.routerLink"\n                                                                    class="sw-data-grid__cell-value"\n                                                                    :to="{ name: column.routerLink, params: { id: item.id } }"\n                                                            >\n                                                                {{ renderColumn(item, column) }}\n                                                            </router-link>\n                                                        {% endblock %}\n                                                        {% block sw_data_grid_columns_render_value %}\n                                                            <span\n                                                                    v-else\n                                                                    class="sw-data-grid__cell-value"\n                                                            >\n                                            {{ renderColumn(item, column) }}\n                                        </span>\n                                                        {% endblock %}\n                                                    </template>\n                                                {% endblock %}\n                                            </template>\n                                        </slot>\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </td>\n                    {% endblock %}\n\n                    {% block sw_data_grid_body_cell_spacer %}\n                        <td\n                                v-if="hasResizeColumns"\n                                aria-hidden="true"\n                                class="sw-data-grid__cell sw-data-grid__cell-spacer"\n                                @dblclick="onDbClickCell(item)"\n                        >\n                            <div class="sw-data-grid__cell-content"></div>\n                        </td>\n                    {% endblock %}\n\n                    {% block sw_data_grid_body_cell_actions %}\n                        <td\n                                v-if="showActions"\n                                class="sw-data-grid__cell sw-data-grid__cell--actions"\n                        >\n                            {% block sw_data_grid_body_cell_actions_content %}\n                                <div class="sw-data-grid__cell-content">\n\n                                    {% block sw_data_grid_inline_edit_actions %}\n                                        <template v-if="isInlineEditActive && currentInlineEditId === item[itemIdentifierProperty]">\n\n                                            {% block sw_data_grid_inline_edit_actions_cancel %}\n                                                <sw-button\n                                                        class="sw-data-grid__inline-edit-cancel"\n                                                        size="x-small"\n                                                        :title="$tc(\'global.default.cancel\')"\n                                                        :aria-label="$tc(\'global.default.cancel\')"\n                                                        square\n                                                        @click="onClickCancelInlineEdit(item)"\n                                                >\n                                                    {% block sw_data_grid_inline_edit_actions_cancel_icon %}\n                                                        <sw-icon\n                                                                name="small-default-x-line-small"\n                                                                size="14px"\n                                                        />\n                                                    {% endblock %}\n                                                </sw-button>\n                                            {% endblock %}\n\n                                            {% block sw_data_grid_inline_edit_actions_save %}\n                                                <sw-button\n                                                        class="sw-data-grid__inline-edit-save"\n                                                        variant="primary"\n                                                        size="x-small"\n                                                        :title="$tc(\'global.default.save\')"\n                                                        :aria-label="$tc(\'global.default.save\')"\n                                                        square\n                                                        @click="onClickSaveInlineEdit(item)"\n                                                >\n                                                    {% block sw_data_grid_inline_edit_actions_save_icon %}\n                                                        <sw-icon\n                                                                name="small-default-checkmark-line-small"\n                                                                size="14px"\n                                                        />\n                                                    {% endblock %}\n                                                </sw-button>\n                                            {% endblock %}\n                                        </template>\n                                    {% endblock %}\n\n                                    {% block sw_data_grid_body_cell_actions_menu %}\n                                        <sw-context-button\n                                                v-else\n                                                class="sw-data-grid__actions-menu"\n                                        >\n                                            <slot\n                                                    name="actions"\n                                                    :item="item"\n                                                    :itemIndex="itemIndex"\n                                            >\n                                                {% block sw_data_grid_slot_actions %}{% endblock %}\n                                            </slot>\n                                        </sw-context-button>\n                                    {% endblock %}\n\n                                    {% block sw_data_grid_body_cell_action_modals %}\n                                        <slot\n                                                name="action-modals"\n                                                :item="item"\n                                        >\n                                            {% block sw_data_grid_slot_action_modals %}{% endblock %}\n                                        </slot>\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </td>\n                    {% endblock %}\n                </tr>\n            {% endblock %}\n            </tbody>\n        {% endblock %}\n\n        {% block sw_data_grid_skeleton %}\n            <sw-data-grid-skeleton\n                    v-else\n                    :show-selection="showSelection"\n                    :show-actions="showActions"\n                    :current-columns="currentColumns"\n                    :has-resize-columns="hasResizeColumns"\n                    :item-amount="skeletonItemAmount"\n                    class="sw-data-grid__body"\n            />\n        {% endblock %}\n    </table>\n{% endblock %}',props:{items:{type:Array,required:!0},itemIdentifierProperty:{type:String,required:!1,default:"id"},preSelection:{type:Object,required:!1,default:null},isGroupedView:{type:Boolean,required:!1,default:!1},jobTypes:{type:Array,required:!1,default:()=>[]}},computed:{jobRepository(){return this.repositoryFactory.create("od_scheduler_job")}},data(){return{records:this.items,selection:Object.assign({},this.preSelection||{}),successItems:!1,pendingItems:!1,errorItems:!1,reloadInterval:null,page:1,limit:25}},methods:{canDelete(e){return -1!==["error","succeed"].indexOf(e.status)},selectAll(e){this.$delete(this.selection),this.records.forEach(t=>{this.isSelected(t[this.itemIdentifierProperty])!==e&&this.selectItem(e,t)}),this.$emit("select-all-items",this.selection)},selectItem(e,t){if(!this.canDelete(t))return;let n=this.selection;e?this.$set(this.selection,t[this.itemIdentifierProperty],t):!e&&n[t[this.itemIdentifierProperty]]&&this.$delete(this.selection,t[this.itemIdentifierProperty]),this.$emit("select-item",this.selection,t,e)}}});let{Component:s}=Shopware;s.register("od-job-status-badge",{template:'<sw-color-badge rounded\n                :variant="variant"\n                :class="additionalClass"\n                style="margin-right: 10px; margin-top: 3px;">\n</sw-color-badge>\n\n',props:{status:{type:String,required:!0}},computed:{additionalClass(){return"running"===this.status?"--pulse":""},variant(){switch(this.status){case"error":return"error";case"succeed":case"running":return"success";default:return""}}}});class o{static sortMessages(e){return e.forEach(function(e){e.messages=e.messages.sort(function(e,t){return e.createdAt>t.createdAt?1:e.createdAt<t.createdAt?-1:0})}),e}}n(276);let{Component:i,Mixin:a}=Shopware,{Criteria:l}=Shopware.Data;i.register("od-job-listing-index",{template:'{% block od_entity_listing_base %}\n    <div class="od-entity-listing-wrapper">\n        <div class="od-job-listing-actions-bar">\n            <div class="action-item">\n                {% block od_scheduler_job_view_mode %}\n                    <sw-select-field v-model:value="jobDisplayType" :label="$tc(\'job-listing.page.listing.index.display-mode\')">\n                        <option v-for="option in jobDisplayMode" :value="option.value">{{ option.name }}</option>\n                    </sw-select-field>\n\n                    <sw-select-field v-if="jobDisplayType !== \'list\'" v-model:value="sortType" :label="$tc(\'job-listing.page.listing.index.group-by\')">\n                        <option value="status">{{ $tc(\'job-listing.page.listing.index.status\') }}</option>\n                        <option value="type">{{ $tc(\'job-listing.page.listing.index.job-type\') }}</option>\n                    </sw-select-field>\n\n                    <sw-datepicker\n                            :label="$tc(\'job-listing.page.listing.index.date-from\')"\n                            v-if="jobDisplayType == \'grouped\'"\n                            v-model:value="groupCreationDate.fromDate"\n                    />\n\n                    <sw-datepicker\n                            :label="$tc(\'job-listing.page.listing.index.date-to\')"\n                            v-if="jobDisplayType == \'grouped\'"\n                            v-model:value="groupCreationDate.toDate"\n                    />\n\n                {% endblock %}\n            </div>\n            <div class="cation-item">\n                {% block od_scheduler_job_auto_load_switcher %}\n                    <sw-switch-field class="job-listing-auto-loading-switch" v-model="autoLoadIsActive"\n                                     :label="$tc(\'job-listing.page.listing.index.auto-load\')">\n                    </sw-switch-field>\n                {% endblock %}\n            </div>\n        </div>\n\n        <sw-container v-if="!jobItems" columns="1fr 1fr">\n            <sw-loader size="50px">\n            </sw-loader>\n        </sw-container>\n\n        {% block od_job_charts %}\n            <od-scheduler-charts ref="jobCharts"\n                                 v-if="jobDisplayType === \'chart\'"\n                                 :jobTypes="jobTypes"\n                                 :sortType="sortType">\n            </od-scheduler-charts>\n        {% endblock %}\n\n        {% block od_job_grouped_component %}\n\n            <od-grouped-view v-if="jobDisplayType === \'grouped\'"\n                             ref="jobGroups"\n                             :groupCreationDate="groupCreationDate"\n                             :jobTypes="jobTypes"\n                             :sortType="sortType">\n            </od-grouped-view>\n        {% endblock %}\n\n        {% block od_job_list_grid %}\n            <od-entity-listing\n                    v-if="jobItems && jobDisplayType === \'list\'"\n                    :items="jobItems"\n                    :repository="jobRepository"\n                    :sort-by="currentSortBy"\n                    :sort-direction="sortDirection"\n                    :is-loading="isLoading"\n                    :showSelection="true"\n                    :allowColumnEdit="false"\n                    :allowDelete="true"\n                    :criteriaLimit="25"\n                    :limit="25"\n                    :allowEdit="false"\n                    :jobTypes="jobTypes"\n                    :isGroupedView="isGroupedView"\n                    @page-change="pageChange"\n                    :columns="columns">\n                {% block sw_data_grid_slot_pagination %}\n                    <sw-pagination\n                            v-bind="{ page, limit, total }"\n                            :total-visible="6"\n                            @page-change="paginate"\n                    />\n                {% endblock %}\n                <template #column-status="{ item }">\n                    {% block od_job_list_grid_job_status_link %}\n                        <template>\n                            <od-job-status-badge :status="item.status"></od-job-status-badge>\n                            {{ $tc(\'job-listing.page.listing.grid.job-status.\' + item.status) }}\n                        </template>\n                    {% endblock %}\n                </template>\n                <template #column-name="{ item }">\n                    {% block od_job_list_grid_job_name_link %}\n                        {{ item.name }}\n                    {% endblock %}\n                </template>\n                <template #column-startedAt="{ item }">\n                    {% block od_job_list_grid_job_started_date %}\n                        <sw-time-ago :date="item.startedAt" />\n                    {% endblock %}\n                </template>\n                <template #column-finishedAt="{ item }">\n                    {% block od_job_list_grid_job_finished_date %}\n                        <sw-time-ago :date="item.finishedAt" />\n                    {% endblock %}\n                </template>\n                <template #column-createdAt="{ item }">\n                    {% block od_job_list_grid_job_created_date %}\n                        <sw-time-ago :date="item.createdAt" />\n                    {% endblock %}\n                </template>\n                <template class="sub-jobs-column" #column-subJobs="{ item }">\n                    {% block od_job_list_grid_job_sub_jobs %}\n                        <div :class="item.subJobs.length > 0 ? \'has-subjobs\' : \'\'"\n                             class="sub-jobs-counters-container jobs-info-counter">\n                            <div class="count-container" v-if="item.subJobs">\n                            <span class="info-container">\n                                <span class="count" v-html="getChildrenCount(item, \'succeed\')"></span>\n                            </span>\n                                <od-job-status-badge status="succeed"></od-job-status-badge>\n                            </div>\n\n                            <div class="count-container" v-if="item.subJobs">\n                            <span class="warning-container">\n                                <span class="count" v-html="getChildrenCount(item, \'pending\')"></span>\n                            </span>\n                                <od-job-status-badge status="pending"></od-job-status-badge>\n                            </div>\n\n                            <div class="count-container" v-if="item.subJobs">\n                            <span class="error-counter">\n                                <span class="count" v-html="getChildrenCount(item, \'error\')"></span>\n                            </span>\n                                <od-job-status-badge status="error"></od-job-status-badge>\n                            </div>\n                        </div>\n                    {% endblock %}\n                    <sw-button v-if="item.subJobs.length > 0"\n                               class="sub-job-show-modal"\n                               size="small"\n                               variant="primary"\n                               :disabled="item.subJobs.length <= 0"\n                               @click="showSubJobs(item.id)">\n                        <sw-icon name="regular-cog" color="#fff" :small="true" :decorative="true"></sw-icon>\n                        {{ $tc(\'job-listing.page.listing.index.show-sub-jobs\') }}\n                    </sw-button>\n                </template>\n                <template #column-messages="{ item }">\n                    {% block od_job_list_grid_job_messages %}\n                        <div :class="item.messages.length > 0 ? \'has-messages\' : \'\'"\n                             class="message-counters-container jobs-info-counter">\n                            <div class="count-container" v-if="item.messages">\n                            <span class="info-counter">\n                                <span class="count" v-html="getMessagesCount(item, \'info\')"></span>\n                            </span>\n                                <sw-icon :small="true" name="regular-info-circle" color="#3498db"></sw-icon>\n                            </div>\n\n                            <div class="count-container" v-if="item.messages">\n                            <span class="warning-counter">\n                                <span class="count" v-html="getMessagesCount(item, \'warning\')"></span>\n                            </span>\n                                <sw-icon :small="true" name="regular-exclamation-triangle" color="#f39c12"></sw-icon>\n                            </div>\n\n                            <div class="count-container" v-if="item.messages">\n                            <span class="error-counter">\n                                <span class="count" v-html="getMessagesCount(item, \'error\')"></span>\n                            </span>\n                                <sw-icon :small="true" name="regular-times-hexagon" color="#c0392b"></sw-icon>\n                            </div>\n                        </div>\n                        <sw-button v-if="item.messages.length > 0"\n                                   class="job-messages-show-modal"\n                                   size="small"\n                                   variant="primary"\n                                   :disabled="item.messages.length <= 0"\n                                   @click="showJobMessages(item)">\n                            <sw-icon name="regular-envelope" color="#fff" :small="true" :decorative="true"></sw-icon>\n                            {{ $tc(\'job-listing.page.listing.index.show-job-messages\') }}\n                        </sw-button>\n                    {% endblock %}\n                </template>\n                <template #actions="{ item }">\n                    <sw-context-menu-item :disabled="item.status !== \'error\'"\n                                          @click="rescheduleJob(item.id)">\n                        {{ $tc(\'job-listing.actions.reschedule-job.button.label\') }}\n                    </sw-context-menu-item>\n                    <sw-context-menu-item class="sw-context-menu-item--danger"\n                                          :disabled="!canDelete(item)"\n                                          @click="onDeleteJob(item.id)">\n                        {{ $tc(\'job-listing.actions.delete-job.button.label\') }}\n                    </sw-context-menu-item>\n                </template>\n            </od-entity-listing>\n        {% endblock %}\n\n        {% block od_entity_listing_job_subs_modal %}\n            <sw-modal class="od-job-sub-jobs-modal" v-if="showJobSubsModal" :title="$tc(\'job-listing.page.listing.grid.column.child-jobs\')"\n                      @modal-close="showJobSubsModal = false">\n                <od-job-sub-jobs v-if="currentJobID" :jobId="currentJobID">\n\n                </od-job-sub-jobs>\n                <template #modal-footer>\n                    <sw-button variant="primary"\n                               @click="showJobSubsModal = false">\n                        {{ $tc(\'job-listing.page.listing.index.close\') }}\n                    </sw-button>\n                </template>\n            </sw-modal>\n        {% endblock %}\n\n        {% block od_entity_listing_job_messages_modal %}\n            <sw-modal class="od-job-messages-modal" v-if="showMessagesModal"\n                      :title="$tc(\'job-listing.page.listing.grid.column.messages\')"\n                      @modal-close="showMessagesModal = false">\n                {% block job_messages_listing %}\n                    <div v-if="currentJobMessages" class="job_list_grid_job_messages-information" style="width:100%;">\n                        <div class="messages-content" v-for="item in currentJobMessages">\n                            <sw-alert class="od-alert"\n                                      v-if="item.type == \'info-message\'"\n                                      variant="info"\n                                      appearance="default"\n                                      :showIcon="true"\n                                      :closable="false">\n                                {{ item.message }}\n                            </sw-alert>\n                            <sw-alert class="od-alert"\n                                      v-if="item.type == \'error-message\'"\n                                      variant="error"\n                                      appearance="default"\n                                      :showIcon="true"\n                                      :closable="false">\n                                {{ item.message }}\n                            </sw-alert>\n                            <sw-alert class="od-alert"\n                                      v-if="item.type == \'warning-message\'"\n                                      variant="warning"\n                                      appearance="default"\n                                      :showIcon="true"\n                                      :closable="false">\n                                {{ item.message }}\n                            </sw-alert>\n                        </div>\n                    </div>\n                {% endblock %}\n                <template #modal-footer>\n                    <sw-button variant="primary"\n                               @click="showMessagesModal = false">\n                        {{ $tc(\'job-listing.page.listing.index.close\') }}\n                    </sw-button>\n                </template>\n            </sw-modal>\n        {% endblock %}\n    </div>\n{% endblock %}\n',inject:["OdRescheduleService","repositoryFactory","filterFactory","feature"],mixins:[a.getByName("notification")],props:{isGroupedView:{type:Boolean,required:!1,default:!1},jobTypes:{type:Array,required:!1,default:()=>[]},filterCriteria:{type:Array,required:!1,default:()=>[]}},data(){return{jobItems:null,currentSortBy:"startedAt",sortDirection:"DESC",isLoading:!1,reloadInterval:null,showJobInfoModal:!1,showJobSubsModal:!1,currentJobID:null,showMessagesModal:!1,currentJobMessages:null,total:0,groupCreationDate:{},sortType:"status",jobDisplayType:null,autoLoad:!1,autoLoadIsActive:!1,autoReloadInterval:6e4,page:1,limit:25}},watch:{autoLoadIsActive(){this._handleAutoReload(this.autoLoadIsActive)},jobDisplayType(){this.stopAutoLoading(),this.$emit("job-display-type-changed",this.jobDisplayType)},filterCriteria(){this.filterCriteriaChanged(this.filterCriteria)}},computed:{jobRepository(){return this.repositoryFactory.create("od_scheduler_job")},messageRepository(){return this.repositoryFactory.create("od_scheduler_job_message")},columns(){return[{property:"name",label:this.$tc("job-listing.page.listing.grid.column.name"),allowResize:!0,width:"250px"},{property:"status",label:this.$tc("job-listing.page.listing.grid.column.status"),allowResize:!0,width:"150px"},{property:"startedAt",label:this.$tc("job-listing.page.listing.grid.column.started-at"),allowResize:!0,width:"170px",sortable:!0},{property:"finishedAt",label:this.$tc("job-listing.page.listing.grid.column.finished-at"),allowResize:!0,width:"170px",sortable:!0},{property:"createdAt",label:this.$tc("job-listing.page.listing.grid.column.created-at"),allowResize:!0,width:"170px",sortable:!0},{property:"subJobs",label:this.$tc("job-listing.page.listing.grid.column.child-jobs"),allowResize:!0,width:"250px",visible:!0,sortable:!1},{property:"messages",label:this.$tc("job-listing.page.listing.grid.column.messages"),allowResize:!0,width:"250px",visible:!0,sortable:!1}]},jobDisplayMode(){return[{name:this.$tc("job-listing.page.listing.index.list"),value:"list"},{name:this.$tc("job-listing.page.listing.index.grouped"),value:"grouped"},{name:this.$tc("job-listing.page.listing.index.chart"),value:"chart"}]}},created(){this.createdComponent()},methods:{paginate({page:e,limit:t}){this.page=e,this.limit=t,this.getList()},createdComponent(){this.jobDisplayType="list",this.getList()},filterCriteriaChanged(e){this.getList(e)},_handleAutoReload(e){e&&this.autoReloadInterval>0?"list"===this.jobDisplayType?this.reloadInterval=setInterval(()=>{this.updateList()},this.autoReloadInterval):"grouped"===this.jobDisplayType?this.reloadInterval=setInterval(()=>{this.$refs.jobGroups.initGroupedView()},this.autoReloadInterval):"chart"===this.jobDisplayType&&(this.reloadInterval=setInterval(()=>{this.$refs.jobCharts.initChartData()},this.autoReloadInterval)):clearInterval(this.reloadInterval)},pageChange(){this.autoLoadIsActive=!1,clearInterval(this.reloadInterval)},getLinkParams(e){return{id:e.id,backPath:this.$route.name}},updateList(e){let t=new l(this.page,this.limit);return t.addFilter(l.equals("parentId",null)),t.addSorting(l.sort("createdAt","DESC",!1)),t.addAssociation("messages"),t.addAssociation("subJobs"),e&&e.forEach(e=>{t.addFilter(e)}),this.jobTypes!==[]&&t.addFilter(l.equalsAny("type",this.jobTypes)),this.jobRepository.search(t,Shopware.Context.api).then(e=>{this.jobItems=o.sortMessages(e)})},getMessagesCount(e,t){return e.messages.filter(function(e){return e.type===t+"-message"}).length},getChildrenCount(e,t){return e.subJobs.filter(function(e){return e.status===t}).length},getList(e){this.isLoading=!0,this.updateList(e).then(()=>{this.isLoading=!1})},onRefresh(e){return"grouped"===this.jobDisplayType?this.$refs.jobGroups.onRefresh():"chart"===this.jobDisplayType?this.$refs.jobCharts.onRefresh():this.getList(e)},canDelete(e){return -1!==["error","succeed"].indexOf(e.status)},onDeleteJob(e){this.jobRepository.delete(e,Shopware.Context.api).then(()=>{this.updateList()})},rescheduleJob(e){this.OdRescheduleService.rescheduleJob(e).then(()=>{this.createNotificationSuccess({message:"Job has been rescheduled successfully."}),this.updateList()}).catch(()=>{this.createNotificationError({message:"Unable reschedule job."})})},showSubJobs(e){this.currentJobID=e,this.showJobSubsModal=!0},showJobMessages(e){this.currentJobMessages=e.messages,this.showMessagesModal=!0},stopAutoLoading(){this.autoLoadIsActive=!1,clearInterval(this.reloadInterval)}},beforeDestroy(){clearInterval(this.reloadInterval)}});var r=JSON.parse('{"job-listing":{"general":{"title":"Job Listing Pages","description":"job-listing"},"menu":{"title":"Job Listing"},"page":{"listing":{"title":"Job Listing","description":"List of Jobs","index":{"display-mode":"Display Mode","list":"List","grouped":"Grouped","chart":"Chart","group-by":"Group by","status":"Status","job-type":"Job Type","date-from":"Date from","date-to":"Date to","auto-load":"Auto load","child-jobs":"Child Jobs","messages":"Messages","show-sub-jobs":"Show sub jobs","show-job-messages":"Show Job Messages","close":"Close","loading":"Loading..."},"grouped-view":{"job-info":"Job info","job-messages":"Job Messages","sub-jobs":"Sub jobs"},"grid":{"job-status":{"succeed":"Success","error":"Failed","pending":"Pending","running":"Running"},"column":{"type":"Type","status":"Status","name":"Name","started-at":"Started at","finished-at":"Finished at","created-at":"Created at","child-jobs":"Child Jobs","messages":"Messages","show-sub-jobs":"Show sub jobs","show-job-messages":"Show Job Messages","close":"Close"},"message-modal":{"label":"Job Messages"}}},"detail":{"textHeadline":"Job","jobChildrenTitle":"Job Children"}},"actions":{"reschedule-job":{"button":{"label":"Reschedule Job"}},"delete-job":{"button":{"label":"Delete Job"}},"view-job":{"button":{"label":"View Job"}},"show-messages":{"button":{"label":"Show Messages"}}}}}'),d=JSON.parse('{"job-listing":{"general":{"title":"\xdcbersicht der Jobs","description":"Job \xdcbersicht"},"menu":{"title":"Job \xdcbersicht"},"page":{"listing":{"title":"Job \xdcbersicht","description":"Liste der Jobs","index":{"display-mode":"Anzeigemodus","list":"\xdcbersicht","grouped":"Gruppiert","chart":"Diagramm","group-by":"Gruppiere nach","status":"Status","job-type":"Job Typ","date-from":"Datum von","date-to":"Datum bis","auto-load":"Automatisches Laden","child-jobs":"Kinder-Jobs","messages":"Meldungen","show-sub-jobs":"Sub-Jobs anzeigen","show-job-messages":"Meldungen zu Jobs anzeigen","close":"Schlie\xdfen","loading":"Wird geladen..."},"grouped-view":{"job-info":"Job-Die Info","job-messages":"Job-Meldungen","sub-jobs":"Sub-Jobs"},"grid":{"job-status":{"succeed":"erfolgreich","error":"fehlgeschlagen","pending":"ausstehend","running":"in Bearbeitung"},"column":{"type":"Typ","status":"Status","name":"Name","started-at":"Gestartet um","finished-at":"Fertig um","created-at":"Beendet um","child-jobs":"Kinder-Jobs","messages":"Meldungen","show-sub-jobs":"Unterjobs anzeigen","show-job-messages":"Meldungen zu Jobs anzeigen","close":"Schlie\xdfen"},"message-modal":{"label":"Job-Meldungen"}}},"detail":{"textHeadline":"Job","jobChildrenTitle":"Kinder-Jobs"}},"actions":{"reschedule-job":{"button":{"label":"Umplanen Job"}},"delete-job":{"button":{"label":"Job l\xf6schen"}},"view-job":{"button":{"label":"Job anzeigen"}},"show-messages":{"button":{"label":"Meldungen anzeigen"}}}}}');let{Module:c}=Shopware;c.register("od-job-listing",{type:"plugin",title:"job-listing.general.title",description:"job-listing.general.description",color:"#F88962",icon:"default-avatar-multiple",snippets:{"en-GB":r,"de-DE":d},routes:{detail:{path:"detail/:id/back/:backPath",props:{default:e=>({jobId:e.params.id})}}}});let b=Shopware.Classes.ApiService;var u=class extends b{constructor(e,t,n="od-job"){super(e,t,n)}rescheduleJob(e){let t=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/reschedule`,{params:{jobId:e},headers:t}).then(e=>b.handleResponse(e))}};let{Application:m}=Shopware,g=m.getContainer("init");m.addServiceProvider("OdRescheduleService",e=>new u(g.httpClient,e.loginService));let{Component:p}=Shopware,{Criteria:h}=Shopware.Data;p.register("od-job-info",{template:'{% block od_job_info_base %}\n    <sw-card-section v-if="jobItem">\n        {% block job_info_overview_columns %}\n            <sw-container\n                    columns="repeat(auto-fit, minmax(250px, 1fr))"\n                    gap="30px 30px">\n                {% block job_info_overview_left_column %}\n                    <sw-description-list\n                            columns="1fr"\n                            grid="1fr">\n                        {% block job_info_overview_name %}\n                            <dt>{{ $tc(\'job-listing.page.listing.grid.column.name\') }}</dt>\n                            <dd>\n                                <sw-order-inline-field v-if="jobItem.name"\n                                                       :display-value="jobItem.name"\n                                                       :value="jobItem.name"\n                                                       :editable="false"\n                                />\n                            </dd>\n                        {% endblock %}\n                        {% block job_info_overview_status %}\n                            <dt>{{ $tc(\'job-listing.page.listing.grid.column.status\') }}</dt>\n                            <dd>\n                                <template>\n                                    <od-job-status-badge :status="jobItem.status">\n                                    </od-job-status-badge>\n                                    {{ $tc(\'job-listing.page.listing.grid.job-status.\' + jobItem.status) }}\n                                </template>\n                            </dd>\n                        {% endblock %}\n                        {% block job_info_overview_startedAt %}\n                            <dt>{{ $tc(\'job-listing.page.listing.grid.column.started-at\') }}</dt>\n                            <dd>\n                                <sw-order-inline-field v-if="jobItem.startedAt"\n                                                       :display-value="jobItem.startedAt|date()"\n                                                       :value="jobItem.startedAt|date()"\n                                                       :editable="false"\n                                />\n                            </dd>\n                        {% endblock %}\n                    </sw-description-list>\n                {% endblock %}\n                {% block od_job_info_overview_right_column %}\n                    <sw-description-list\n                            columns="1fr"\n                            grid="1fr" class="od-job-user-card__summary-vertical">\n                        {% block job_detail_base_overview_type %}\n                            <dt>{{ $tc(\'job-listing.page.listing.grid.column.type\') }}</dt>\n                            <dd>\n                                <sw-order-inline-field v-if="jobItem.type"\n                                                       :display-value="jobItem.type"\n                                                       :value="jobItem.type"\n                                                       :editable="false"\n                                />\n                            </dd>\n                        {% endblock %}\n                        {% block job_info_overview_createdAt %}\n                            <dt>{{ $tc(\'job-listing.page.listing.grid.column.created-at\') }}</dt>\n                            <dd>\n                                <sw-order-inline-field v-if="jobItem.createdAt"\n                                                       :display-value="jobItem.createdAt|date()"\n                                                       :value="jobItem.startedAt|date()"\n                                                       :editable="false"/>\n                            </dd>\n                        {% endblock %}\n                        {% block job_info_overview_finishedAt %}\n                            <dt>{{ $tc(\'job-listing.page.listing.grid.column.finished-at\') }}</dt>\n                            <dd>\n                                <sw-order-inline-field v-if="jobItem.finishedAt"\n                                                       :display-value="jobItem.finishedAt|date()"\n                                                       :value="jobItem.finishedAt|date()"\n                                                       :editable="false"/>\n                            </dd>\n                        {% endblock %}\n                    </sw-description-list>\n                {% endblock %}\n            </sw-container>\n        {% endblock %}\n    </sw-card-section>\n{% endblock %}',inject:["OdRescheduleService","repositoryFactory"],mixins:["notification"],props:{jobId:{type:String,required:!1,default:null}},data(){return{jobItem:null}},computed:{jobRepository(){return this.repositoryFactory.create("od_scheduler_job")}},created(){this.initPageData()},methods:{initPageData(){this.jobRepository.get(this.jobId,Shopware.Context.api,new h).then(e=>{this.jobItem=e})}}}),n(931);let{Component:_}=Shopware,{Criteria:w}=Shopware.Data;_.register("od-job-sub-jobs",{template:'{% block od_job_sub_jobs_base %}\n    <div class="sub-jobs-container">\n        <div class="sub-job-container" v-if="subJobs">\n            {% block job_children_listing %}\n                <od-entity-listing\n                        v-if="subJobs"\n                        :items="subJobs"\n                        :data-source="subJobs"\n                        :repository="jobRepository"\n                        :showSelection="false"\n                        :allowColumnEdit="false"\n                        :compactMode="false"\n                        :allowDelete="false"\n                        :allowEdit="false"\n                        :columns="jobChildrenColumns">\n                    <template #column-name="{ item }">\n                        {% block job_list_grid_job_name_link %}\n                            {{ item.name }}\n                        {% endblock %}\n                    </template>\n                    <template #column-status="{ item }">\n                        {% block job_list_grid_job_status_link %}\n                            <template>\n                                <od-job-status-badge :status="item.status"></od-job-status-badge>\n                                {{ $tc(\'job-listing.page.listing.grid.job-status.\' + item.status) }}\n                            </template>\n                        {% endblock %}\n                    </template>\n\n                    <template #column-startedAt="{ item }">\n                        {% block job_list_grid_job_started_at %}\n                            <sw-time-ago :date="item.startedAt" />\n                        {% endblock %}\n                    </template>\n                    <template #column-finishedAt="{ item }">\n                        {% block job_list_grid_job_finished_at %}\n                            <sw-time-ago :date="item.finishedAt" />\n                        {% endblock %}\n                    </template>\n                    <template #column-createdAt="{ item }">\n                        {% block job_list_grid_job_created_at %}\n                            <sw-time-ago :date="item.createdAt" />\n                        {% endblock %}\n                    </template>\n                    <template #column-messages="{ item }">\n                        {% block sub_job_show_messages_button %}\n                            <div :class="item.messages.length > 0 ? \'has-messages\' : \'\'" class="message-counters-container jobs-info-counter">\n                                <div class="count-container" v-if="item.messages">\n                            <span class="info-counter">\n                                <span class="count" v-html="getMessagesCount(item, \'info\')"></span>\n                            </span>\n                                    <sw-icon :small="true" name="regular-info-circle" color="#3498db"></sw-icon>\n                                </div>\n\n                                <div class="count-container" v-if="item.messages">\n                            <span class="warning-counter">\n                                <span class="count" v-html="getMessagesCount(item, \'warning\')"></span>\n                            </span>\n                                    <sw-icon :small="true" name="regular-exclamation-triangle" color="#f39c12"></sw-icon>\n                                </div>\n\n                                <div class="count-container" v-if="item.messages">\n                            <span class="error-counter">\n                                <span class="count" v-html="getMessagesCount(item, \'error\')"></span>\n                            </span>\n                                    <sw-icon :small="true" name="regular-times-hexagon" color="#c0392b"></sw-icon>\n                                </div>\n                            </div>\n                            <sw-button v-if="item.messages.length > 0"\n                                       class="job-messages-show-modal"\n                                       size="small"\n                                       variant="primary"\n                                       :disabled="item.messages.length <= 0"\n                                       @click="showMessageModal(item.messages)">\n                                <sw-icon name="regular-envelope" color="#fff" :small="true" :decorative="true"></sw-icon>\n                                {{ $tc(\'job-listing.actions.show-messages.button.label\') }}\n                            </sw-button>\n                        {% endblock %}\n                    </template>\n                    <template #actions="{ item }">\n                        <sw-context-menu-item :disabled="item.status !== \'error\'"\n                                              @click="rescheduleJob(item.id)">\n                            {{ $tc(\'job-listing.actions.reschedule-job.button.label\') }}\n                        </sw-context-menu-item>\n                        <sw-context-menu-item v-if="item.messages"\n                                              :disabled="item.messages.length <= 0"\n                                              @click="showMessageModal(item.messages)">\n                            {{ $tc(\'job-listing.actions.show-messages.button.label\') }}\n                        </sw-context-menu-item>\n                    </template>\n                </od-entity-listing>\n            {% endblock %}\n        </div>\n        <div v-else>\n            {{ $tc(\'job-listing.page.listing.index.loading\') }}\n        </div>\n        <sw-modal class="od-job-messages-modal" v-if="showMessagesModal" :title="$tc(\'job-listing.page.listing.grid.column.messages\')"\n                  @modal-close="showMessagesModal = false">\n            {% block job_messages_listing %}\n                <div v-if="currentJobMessages" class="job_list_grid_job_messages-information" style="width:100%;">\n                    <div class="messages-content" v-for="item in currentJobMessages">\n                        <sw-alert class="od-alert"\n                                  v-if="item.type == \'info-message\'"\n                                  variant="info"\n                                  appearance="default"\n                                  :showIcon="true"\n                                  :closable="false">\n                            {{ item.message }}\n                        </sw-alert>\n                        <sw-alert class="od-alert"\n                                  v-if="item.type == \'error-message\'"\n                                  variant="error"\n                                  appearance="default"\n                                  :showIcon="true"\n                                  :closable="false">\n                            {{ item.message }}\n                        </sw-alert>\n                        <sw-alert class="od-alert"\n                                  v-if="item.type == \'warning-message\'"\n                                  variant="warning"\n                                  appearance="default"\n                                  :showIcon="true"\n                                  :closable="false">\n                            {{ item.message }}\n                        </sw-alert>\n                    </div>\n                </div>\n            {% endblock %}\n            <template #modal-footer>\n                <sw-button variant="primary"\n                           @click="showMessagesModal = false">\n                    {{ $tc(\'job-listing.page.listing.index.close\') }}\n                </sw-button>\n            </template>\n        </sw-modal>\n    </div>\n{% endblock %}\n',inject:["OdRescheduleService","repositoryFactory"],mixins:["notification"],props:{jobId:{type:String,required:!1,default:null}},data(){return{subJobs:null,showMessagesModal:!1,currentJobMessages:null}},computed:{jobRepository(){return this.repositoryFactory.create("od_scheduler_job")},jobChildrenColumns(){return[{property:"name",dataIndex:"name",label:this.$tc("job-listing.page.listing.grid.column.name"),allowResize:!1,inlineEdit:!0,width:"200px"},{property:"status",dataIndex:"status",label:this.$tc("job-listing.page.listing.grid.column.status"),allowResize:!1,inlineEdit:!0,width:"100px"},{property:"startedAt",dataIndex:"startedAt",label:this.$tc("job-listing.page.listing.grid.column.started-at"),allowResize:!1,inlineEdit:!0,width:"150px",sortable:!0},{property:"finishedAt",dataIndex:"finishedAt",label:this.$tc("job-listing.page.listing.grid.column.finished-at"),allowResize:!0,inlineEdit:!0,width:"150px"},{property:"createdAt",dataIndex:"createdAt",label:this.$tc("job-listing.page.listing.grid.column.created-at"),allowResize:!0,inlineEdit:!0,width:"150px"},{property:"messages",dataIndex:"messages",label:"Messages",allowResize:!0,inlineEdit:!1,width:"250px",sortable:!1}]}},created(){this.initModalData()},methods:{initModalData(){let e=new w;e.addFilter(w.equals("parentId",this.jobId)),e.addSorting(w.sort("createdAt","DESC",!1)),e.addAssociation("messages"),this.jobRepository.search(e,Shopware.Context.api).then(e=>{this.subJobs=o.sortMessages(e)})},rescheduleJob(e){this.OdRescheduleService.rescheduleJob(e).then(()=>{this.createNotificationSuccess({message:"Job has been rescheduled successfully."}),this.initPageData()}).catch(()=>{this.createNotificationError({message:"Unable reschedule job."})})},showMessageModal(e){this.currentJobMessages=e,this.showMessagesModal=!0},getMessagesCount(e,t){return e.messages.filter(function(e){return e.type===t+"-message"}).length}}}),n(145);let{Component:f}=Shopware,{Criteria:v}=Shopware.Data;f.register("od-scheduler-charts",{template:'{% block od_job_charts_base %}\n    <div class="od-scheduler-charts">\n        <div class="sw-dashboard-statistics__card-headline-select">\n            <sw-select-field\n                    class="charts-date-range"\n                    v-model:value="statisticDateRanges.value"\n                    size="small">\n                <option\n                        v-for="(value, option) in statisticDateRanges.options"\n                        :key="option"\n                        :value="option">\n                    {{ $tc(\'sw-dashboard.monthStats.dateRanges.\' + option) }}\n                </option>\n            </sw-select-field>\n        </div>\n        <sw-chart\n                type="area"\n                :series="chartSeries"\n                :options="chartOptionsCount"\n                :fill-empty-values="getTimeUnitInterval"\n                :fillEmptyDates="false"\n                :sort="true"\n        >\n        </sw-chart>\n    </div>\n{% endblock %}',inject:["repositoryFactory"],mixins:["notification"],props:{jobTypes:{type:Array,required:!1,default:()=>[]},sortType:{type:String,required:!0,default:()=>"status"}},data(){return{items:null,statisticDateRanges:{value:"30Days",options:{"30Days":30,"14Days":14,"7Days":7,"24Hours":24,yesterday:1}},chartSeries:[],colors:{0:"#FF8C00",1:"#0044ee",2:"#9400D3",3:"#FFD700",4:"#008000",5:"#40E0D0",6:"#00BFFF",7:"#209d90",8:"#C71585",9:"#000000",10:"#F4A460"}}},computed:{jobRepository(){return this.repositoryFactory.create("od_scheduler_job")},getTimeUnitInterval(){let e=this.statisticDateRanges.value;return"yesterday"===e||"24Hours"===e?"hour":"day"},dateAgo(){let e=new Date,t=this.statisticDateRanges.value,n=this.statisticDateRanges.options[t]??0;return"24Hours"===t?e.setHours(e.getHours()-n):(e.setDate(e.getDate()-n),e.setHours(0,0,0,0)),e},chartOptionsCount(){return{title:{text:"Jobs",style:{fontSize:"16px",fontWeight:"600"}},xaxis:{type:"datetime",min:this.dateAgo.getTime(),labels:{datetimeUTC:!1}},yaxis:{min:0,tickAmount:3,labels:{formatter:e=>parseInt(e,10)}}}}},watch:{sortType(){this.initChartData()}},created(){this.initChartData()},methods:{initChartData(){let e=new v;return e.addFilter(v.equals("parentId",null)),e.setLimit(500),this.jobTypes!==[]&&e.addFilter(v.equalsAny("type",this.jobTypes)),this.jobRepository.search(e,Shopware.Context.api).then(e=>{this.items=e,"status"===this.sortType?this.createStatusChartSeries(e):"type"===this.sortType&&this.createTypeChartSeries(e)})},createTypeChartSeries(e){for(let t of(this.chartSeries=this.typeCharts(e),e)){let e=this.parseDate(t.createdAt);this.chartSeries.forEach(n=>{if(n.name===t.name){let t=n.data.findIndex(t=>t.x===e);-1!==t?n.data[t].y=n.data[t].y+1:n.data.push({x:e,y:1})}})}},createStatusChartSeries(e){for(let t of(this.chartSeries=this.statusCharts(),e)){let e=this.parseDate(t.createdAt);if("succeed"===t.status){let t=this.chartSeries[0].data,n=t.findIndex(t=>t.x===e);-1!==n?t[n].y=t[n].y+1:t.push({x:e,y:1})}else if("pending"===t.status){let t=this.chartSeries[2].data,n=t.findIndex(t=>t.x===e);-1!==n?t[n].y=t[n].y+1:t.push({x:e,y:1})}else if("error"===t.status){let t=this.chartSeries[1].data,n=t.findIndex(t=>t.x===e);-1!==n?t[n].y=t[n].y+1:t.push({x:e,y:1})}}},getRandomColor(){return"#"+(1048575e6*Math.random()).toString(16).slice(0,6)},typeCharts(e){let t=[];return e.forEach((e,n)=>{t.find(t=>t.name===e.name)||t.push({name:e.name,data:[],color:this.colors[n]?this.colors[n]:this.getRandomColor(n)})}),t},statusCharts(){return[{name:this.$tc("job-listing.page.listing.grid.job-status.succeed"),data:[],color:"#37d046"},{name:this.$tc("job-listing.page.listing.grid.job-status.error"),data:[],color:"#de294c"},{name:this.$tc("job-listing.page.listing.grid.job-status.pending"),data:[],color:"#d1d9e0"}]},parseDate(e){return new Date((e=e.substring(0,e.lastIndexOf("T")+1)).replace(/-/g,"/").replace("T"," ")).valueOf()},onRefresh(){this.initChartData()}},beforeDestroy(){clearInterval(this.reloadInterval)}}),n(867);let{Component:j}=Shopware,{Criteria:y}=Shopware.Data;j.register("od-grouped-view",{template:'{% block od_grouped_view_base %}\n    <div class="od-grouped-view-container" v-if="groupedItems" :isLoading="isLoading">\n        <div class="od-grouped-view-wrapper"\n             v-for="group in groupedItems">\n            <sw-collapse :class="`is-${group.type}`">\n                <template #header>{{ group.title }} <span class="amount">({{ group.items.total }})</span></template>\n                <template #content>\n                    <od-entity-listing\n                            :items="group.items"\n                            :repository="jobRepository"\n                            :is-loading="isLoading"\n                            :showSelection="true"\n                            :allowColumnEdit="false"\n                            :allowDelete="true"\n                            :allowEdit="false"\n                            :page="1"\n                            :jobTypes="jobTypes"\n                            :columns="columns">\n                        <template #column-status="{ item }">\n                            {% block od_job_list_grid_job_status_link %}\n                                <template>\n                                    <od-job-status-badge :status="item.status"></od-job-status-badge>\n                                    {{ $tc(\'job-listing.page.listing.grid.job-status.\' + item.status) }}\n                                </template>\n                            {% endblock %}\n                        </template>\n                        <template #column-name="{ item }">\n                            {% block od_job_list_grid_job_name_link %}\n                                {{ item.name }}\n                            {% endblock %}\n                        </template>\n                        <template #column-startedAt="{ item }">\n                            {% block od_job_list_grid_job_started_date %}\n                                <sw-time-ago :date="item.startedAt" />\n                            {% endblock %}\n                        </template>\n                        <template #column-finishedAt="{ item }">\n                            {% block od_job_list_grid_job_finished_date %}\n                                <sw-time-ago :date="item.finishedAt" />\n                            {% endblock %}\n                        </template>\n                        <template #column-createdAt="{ item }">\n                            {% block od_job_list_grid_job_created_date %}\n                                <sw-time-ago :date="item.createdAt" />\n                            {% endblock %}\n                        </template>\n                        <template class="sub-jobs-column" #column-subJobs="{ item }">\n                            {% block od_job_list_grid_job_sub_jobs %}\n                                <div :class="item.subJobs.length > 0 ? \'has-subjobs\' : \'\'"\n                                     class="sub-jobs-counters-container jobs-info-counter">\n                                    <div class="count-container" v-if="item.subJobs">\n                            <span class="info-container">\n                                <span class="count" v-html="getChildrenCount(item, \'succeed\')"></span>\n                            </span>\n                                        <od-job-status-badge status="succeed"></od-job-status-badge>\n                                    </div>\n\n                                    <div class="count-container" v-if="item.subJobs">\n                            <span class="warning-container">\n                                <span class="count" v-html="getChildrenCount(item, \'pending\')"></span>\n                            </span>\n                                        <od-job-status-badge status="pending"></od-job-status-badge>\n                                    </div>\n\n                                    <div class="count-container" v-if="item.subJobs">\n                            <span class="error-counter">\n                                <span class="count" v-html="getChildrenCount(item, \'error\')"></span>\n                            </span>\n                                        <od-job-status-badge status="error"></od-job-status-badge>\n                                    </div>\n                                </div>\n                            {% endblock %}\n                            <sw-button v-if="item.subJobs.length > 0" class="sub-job-show-modal" size="small" variant="primary"\n                                       :disabled="item.subJobs.length <= 0" @click="showSubJobs(item.id)">\n                                <sw-icon name="regular-cog" color="#fff" :small="true" :decorative="true"></sw-icon>\n                                {{ $tc(\'job-listing.page.listing.grid.column.show-sub-jobs\') }}\n                            </sw-button>\n                        </template>\n                        <template #column-messages="{ item }">\n                            {% block od_job_list_grid_job_messages %}\n                                <div :class="item.messages.length > 0 ? \'has-messages\' : \'\'"\n                                     class="message-counters-container jobs-info-counter">\n                                    <div class="count-container" v-if="item.messages">\n                            <span class="info-counter">\n                                <span class="count" v-html="getMessagesCount(item, \'info\')"></span>\n                            </span>\n                                        <sw-icon :small="true" name="regular-info-circle" color="#3498db"></sw-icon>\n                                    </div>\n\n                                    <div class="count-container" v-if="item.messages">\n                            <span class="warning-counter">\n                                <span class="count" v-html="getMessagesCount(item, \'warning\')"></span>\n                            </span>\n                                        <sw-icon :small="true" name="regular-exclamation-triangle" color="#f39c12"></sw-icon>\n                                    </div>\n\n                                    <div class="count-container" v-if="item.messages">\n                            <span class="error-counter">\n                                <span class="count" v-html="getMessagesCount(item, \'error\')"></span>\n                            </span>\n                                        <sw-icon :small="true" name="regular-times-hexagon" color="#c0392b"></sw-icon>\n                                    </div>\n                                </div>\n                                <sw-button v-if="item.messages.length > 0" class="job-messages-show-modal" size="small"\n                                           variant="primary" :disabled="item.messages.length <= 0"\n                                           @click="showJobMessages(item)">\n                                    <sw-icon name="regular-envelope" color="#fff" :small="true"\n                                             :decorative="true"></sw-icon>\n                                    Show job messages\n                                </sw-button>\n                            {% endblock %}\n                        </template>\n                        <template #actions="{ item }">\n                            <sw-context-menu-item :disabled="item.status !== \'error\'"\n                                                  @click="rescheduleJob(item.id)">\n                                {{ $tc(\'job-listing.actions.reschedule-job.button.label\') }}\n                            </sw-context-menu-item>\n                            <sw-context-menu-item class="sw-context-menu-item--danger"\n                                                  :disabled="!canDelete(item)"\n                                                  @click="onDeleteJob(item.id)">\n                                {{ $tc(\'job-listing.actions.delete-job.button.label\') }}\n                            </sw-context-menu-item>\n                        </template>\n                    </od-entity-listing>\n                </template>\n            </sw-collapse>\n        </div>\n        {% block od_entity_listing_job_info_modal %}\n            <sw-modal class="od-job-info-modal" v-if="showJobInfoModal" :title="$tc(\'job-listing.page.listing.grouped-view.job-info\')"\n                      @modal-close="showJobInfoModal = false">\n                <od-job-info v-if="currentJobID" :jobId="currentJobID">\n\n                </od-job-info>\n                <template #modal-footer>\n                    <sw-button variant="primary"\n                               @click="showJobInfoModal = false">\n                        {{ $tc(\'job-listing.page.listing.index.close\') }}\n                    </sw-button>\n                </template>\n            </sw-modal>\n        {% endblock %}\n\n        {% block od_entity_listing_job_subs_modal %}\n            <sw-modal class="od-job-sub-jobs-modal" v-if="showJobSubsModal" :title="$tc(\'job-listing.page.listing.grouped-view.sub-jobs\')"\n                      @modal-close="showJobSubsModal = false">\n                <od-job-sub-jobs v-if="currentJobID" :jobId="currentJobID">\n\n                </od-job-sub-jobs>\n                <template #modal-footer>\n                    <sw-button variant="primary"\n                               @click="showJobSubsModal = false">\n                        {{ $tc(\'job-listing.page.listing.index.close\') }}\n                    </sw-button>\n                </template>\n            </sw-modal>\n        {% endblock %}\n\n        {% block od_entity_listing_job_messages_modal %}\n            <sw-modal class="od-job-messages-modal" v-if="showMessagesModal" :title="$tc(\'job-listing.page.listing.grouped-view.job-messages\')"\n                      @modal-close="showMessagesModal = false">\n                {% block job_messages_listing %}\n                    <sw-data-grid\n                            v-if="currentJobMessages"\n                            :items="currentJobMessages"\n                            :data-source="currentJobMessages"\n                            :showSelection="false"\n                            :allowColumnEdit="false"\n                            :allowDelete="false"\n                            :allowEdit="false"\n                            :showActions="false"\n                            :showHeader="false"\n                            class="od-job-messages-grid"\n                            :columns="jobMessagesColumns">\n                        <template #column-message="{ item }">\n                            {% block job_list_grid_job_messages %}\n                                <div class="job_list_grid_job_messages-information" style="width:100%;">\n                                    <sw-alert\n                                            v-if="item.type == \'info-message\'"\n                                            variant="info"\n                                            appearance="default"\n                                            :showIcon="true"\n                                            :closable="false">\n                                        {{ item.message }}\n                                    </sw-alert>\n                                    <sw-alert\n                                            v-if="item.type == \'error-message\'"\n                                            variant="error"\n                                            appearance="default"\n                                            :showIcon="true"\n                                            :closable="false">\n                                        {{ item.message }}\n                                    </sw-alert>\n                                    <sw-alert\n                                            v-if="item.type == \'warning-message\'"\n                                            variant="warning"\n                                            appearance="default"\n                                            :showIcon="true"\n                                            :closable="false">\n                                        {{ item.message }}\n                                    </sw-alert>\n                                </div>\n                            {% endblock %}\n                        </template>\n                    </sw-data-grid>\n                {% endblock %}\n                <template #modal-footer>\n                    <sw-button variant="primary"\n                               @click="showMessagesModal = false">\n                        {{ $tc(\'job-listing.page.listing.index.close\') }}\n                    </sw-button>\n                </template>\n            </sw-modal>\n        {% endblock %}\n    </div>\n{% endblock %}\n',inject:["repositoryFactory"],mixins:["notification"],props:{jobTypes:{type:Array,required:!1,default:()=>[]},groupCreationDate:{type:Object,required:!1,default:()=>{}},sortType:{type:String,required:!0,default:()=>"status"}},data(){return{groupedItems:[],isLoading:!1,showJobInfoModal:!1,showJobSubsModal:!1,currentJobID:null,showMessagesModal:!1,currentJobMessages:null}},computed:{jobRepository(){return this.repositoryFactory.create("od_scheduler_job")},messageRepository(){return this.repositoryFactory.create("od_scheduler_job_message")},jobMessagesColumns(){return[{property:"message",dataIndex:"message",label:this.$tc("job-listing.page.listing.grid.column.message"),allowResize:!1,align:"left",width:"90px"}]},columns(){return[{property:"name",label:this.$tc("job-listing.page.listing.grid.column.name"),allowResize:!0,width:"500px"},{property:"status",label:this.$tc("job-listing.page.listing.grid.column.status"),allowResize:!0,width:"150px"},{property:"startedAt",label:this.$tc("job-listing.page.listing.grid.column.started-at"),allowResize:!0,width:"170px"},{property:"finishedAt",label:this.$tc("job-listing.page.listing.grid.column.finished-at"),allowResize:!0,width:"170px"},{property:"createdAt",label:this.$tc("job-listing.page.listing.grid.column.created-at"),allowResize:!0,width:"170px"},{property:"subJobs",label:this.$tc("job-listing.page.listing.grid.column.child-jobs"),allowResize:!0,width:"250px",visible:!0,sortable:!1},{property:"messages",label:this.$tc("job-listing.page.listing.grid.column.messages"),allowResize:!0,width:"350px",visible:!0,sortable:!1}]}},created(){this.initGroupedView()},watch:{sortType(){this.groupedItems=[],this.initGroupedView()},groupCreationDate:{handler(){this.groupedItems=[],this.initGroupedView()},deep:!0}},methods:{initGroupedView(){this.isLoading=!0;let e=new y;return e.addFilter(y.equals("parentId",null)),e.addSorting(y.sort("createdAt","DESC",!1)),e.addAssociation("messages"),e.addAssociation("subJobs"),e.limit=null,this.jobTypes!==[]&&e.addFilter(y.equalsAny("type",this.jobTypes)),this.groupCreationDate.fromDate&&e.addFilter(y.range("createdAt",{gte:this.groupCreationDate.fromDate})),this.groupCreationDate.toDate&&e.addFilter(y.range("createdAt",{lte:this.groupCreationDate.toDate})),this.jobRepository.search(e,Shopware.Context.api).then(e=>{this.sortJobs(e)})},sortJobs(e){this.groupedItemsTypes=[],this.groupedItems=[],e.forEach(e=>{-1===this.groupedItemsTypes.findIndex(t=>t.title===e[this.sortType])&&this.groupedItemsTypes.push({title:e[this.sortType]})}),this.getJobsByType(this.groupedItemsTypes)},getJobsByType(e){return e.forEach(e=>{let t=new y;t.addFilter(y.equals("parentId",null)),t.addSorting(y.sort("createdAt","DESC",!1)),t.addAssociation("messages"),t.addAssociation("subJobs"),this.groupCreationDate.fromDate&&t.addFilter(y.range("createdAt",{gte:this.groupCreationDate.fromDate})),this.groupCreationDate.toDate&&t.addFilter(y.range("createdAt",{lte:this.groupCreationDate.toDate})),this.jobTypes!==[]&&t.addFilter(y.equalsAny("type",this.jobTypes)),"status"===this.sortType&&t.addFilter(y.equals("status",e.title)),"type"===this.sortType&&t.addFilter(y.equals("type",e.title)),this.jobRepository.search(t,Shopware.Context.api).then(t=>{let n="status"===this.sortType?e.title.toUpperCase():t[0].name,s="status"===this.sortType?this.$tc("job-listing.page.listing.grid.job-status."+e.title):t[0].name;this.groupedItems.push({title:s,type:n,items:o.sortMessages(t)})})}),this.isLoading=!1,this.groupedItems},getMessagesCount(e,t){return e.messages.filter(function(e){return e.type===t+"-message"}).length},getChildrenCount(e,t){return e.subJobs.filter(function(e){return e.status===t}).length},onRefresh(){this.initGroupedView()},canDelete(e){return -1!==["error","succeed"].indexOf(e.status)},onDeleteJob(e){this.jobRepository.delete(e,Shopware.Context.api).then(()=>{this.updateList()})},rescheduleJob(e){this.OdRescheduleService.rescheduleJob(e).then(()=>{this.createNotificationSuccess({message:"Job has been rescheduled successfully."}),this.updateList()}).catch(()=>{this.createNotificationError({message:"Unable reschedule job."})})},showJobInfo(e){this.currentJobID=e,this.showJobInfoModal=!0},showSubJobs(e){this.currentJobID=e,this.showJobSubsModal=!0},showJobMessages(e){this.currentJobMessages=e.messages,this.showMessagesModal=!0}},beforeDestroy(){clearInterval(this.reloadInterval)}})}()})();